openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/hanssak/IW-API/1.0.0
info:
  description: This is a HS Cloud API
  version: "1.0.0"
  title: HS Cloud API
  contact:
    email: hsrnd1@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: 1. 신청
    description: '회원 가입 신청, 탈퇴, 관리자 승인, 알림등 사용자 이벤트 처리 Cycle'  
  - name: 2. 생성
    description: 'Cloud SaaS관련: 제품(솔루션), 인프라, 서버, 네트워크 생성 및 구성'
  - name: 3. 인증
    description: '로그인, 인증, 인가, 토큰 발급 (검증)'
  - name: 4. 관리
    description: '[SA연동] 시스템(Tenent, VM, IW-SA 서비스), Cloud(Network, VM, Storage) 제어 '
  - name: 5. 운영
    description: '[SA연동] 모니터링, 오토스케일링 상태 관리'
  - name: 6. 과금
    description: '[SA연동] SaaS 미터링, 빌링, 청구서 관리'
  - name: 7. 패치
    description: '[SA연동] 업데이트, 백업, 복구'


paths:
  '/member/users/{id}':
    get:
      tags:
        - 1. 신청
      summary: '1.2.1 회원 가입 : 포털을 통한 회원가입 신청 #GetUser'
      description: 'ID확인요청: 서비스포털 -> API Gateway -> GateKeeper'
      operationId: GetUser
      parameters:
        - name: id
          in: path
          description: The name that needs to be fetched.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    post:
      tags: 
        - 1. 신청
      summary: '1.2.1 회원 가입 : 포털을 통한 회원가입 신청 / 1.2.3 회원가입 : 클라우드 관리자가 ID 직접 발급  #PostUser'
      description: '가입요청 신청: 서비스포털 -> API Gateway -> GateKeeper'
      operationId: PostUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Successful create operation
        '400':
          description: Invalid input, object invalid
        '409':
          description: An existing user already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Create user object
        required: true
    patch:
      tags:
        - 1. 신청
      summary: '1.2.2 회원가입 : 회원가입 신청 승인 #PatchUser'
      description: '가입요청에 대한 관리자 승인처리: 관리포털 -> API Gateway -> GateKeeper'
      operationId: PatchUser
      parameters: 
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '404':
          description: Not found user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                isApprove:
                  type: boolean
    delete:
      tags:
        - 1. 신청
      summary: '1.2.5 회원 탈퇴 #DeleteUser'
      description: '구성원 삭제 : 서비스/관리포털 -> API Gateway -> GateKeeper'
      operationId: DeleteUser
      parameters:
        - name: jwt
          in: header
          required: false
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found 
  '/invite':
    post:
      tags:
        - 1. 신청
      summary: '1.2.4 회원 가입 : 초대장을 통한 가입 #PostInvite'
      description: '구성원 추가 : 관리포털 -> API Gateway -> Speaker'
      operationId: PostInvite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Noti'
        description: '이메일 초대장으로 type:email을 설정해야합니다.'
      responses:
        default:
          description: successful operation
  '/apply/products/{name}':
    get:
      tags:
        - 2. 생성
      summary: '1.3.1 SaaS 신청: SaaS상품 라이센스 조회 #GetApplyProduct'
      description: '상품 (SG, PG, OG)선택 후 제품 신청의 초기단계 : 서비스포털 -> API Gateway -> Configurator'
      operationId: GetApplyProduct
      parameters: 
        - name: name
          in: path
          required: true
          description: '상품명을 기입해야함 (예시: securegate, passguard)'
          schema:
            type: string
      responses:
        '200':
          description: '상품에 따른 라이센스 종류 정보'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvisioningService'
        '400':
          description: '상품 이름이 잘못되어 있음'
        '404':
          description: '상품 라이센스 조회 실패 : 찾을 수 없음'
    post:
      tags:
        - 2. 생성
      summary: '1.3.1 SaaS 신청: SaaS상품 구성정보 (웹으로 모든 구성필요)  #PostApplyProduct'
      description: '각 Cloud와 연동하여 모든 솔루션 설정을 완료한 정보여야 합니다. 망연계일 경우 3개 장비 세트로 움직이게 됩니다.'
      operationId: PostApplyProduct
      parameters: 
        - name: name
          in: path
          required: true
          description: '상품명을 기입해야함 (예시: securegate, passguard)'
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceMetaData'
        description: '구성한 상품정보 생성 요청으로 사전 cloud와 vpc정보 수용 필요'
      responses:
        '201':
          description: '정상적으로 생성 되었습니다.'
        '400':
          description: '비정상적인 요청을 하였습니다.'
        '401':
          description: '클라우드 인증 처리가 되지않습니다. (토큰 에러)'
        '409':
          description: '이미 생성되어있습니다. (충돌 발생)'
        


components:
  schemas:
    Tenent:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: 테넌트 ID
        groupName:
          type: string
          
          
          
    User:
      type: object
      required: 
        - id
        - password
        - username
        - tenentId
        - isApprove
      properties:
        id:
          type: string
        password:
          type: string
          description: 암호화 필수
        username:
          type: string
        email:
          type: string
        phone:
          type: string
        isApprove:
          type: boolean
          default: false
          description: '가입승인 처리 (false: 미승인, true: 승인)'
        tenent:
          $ref: '#/components/schemas/Tenent'
          
          
          
    Noti:
      type: object
      description: '#oNoti 현재 Payload만 구성됨 --> MQ, REST 쓸지 정해지지 않음'
      required: 
        - type
        - message
      properties:
        type: 
          type: string
          description: '알림 타입: kakao, email, phone'
          default: 'email'
        msg:
          type: string
          description: '메세지 내용'
    
    
    
    ProvisioningServiceInfo:
      type: object
      properties:
        level:
          type: string
          description: 'SaaS의 상품 등급 (Lite, Basic, Premium)'
        content:
          type: string
          description: '설명'
        spec:
          type: string
          description: '사양'
        pricing:
          type: string
          description: '요금'
    ProvisioningService:
      type: object
      description: '사전에 정의된 SaaS상품의 정보 스키마'
      properties:
        product:
          type: string
          description: ''
        info:
          type: array
          items:
            $ref: '#/components/schemas/ProvisioningServiceInfo'
            
        
    
    NcpServerConfigTf:
      type: object
      description: '네이버 클라우드 전용: 솔루션 서버 설정 정보 (server_code는 HS전용코드)'
      required: 
        - server_code
      properties:
        server_code:
          type: string
          format: XX.XX.XX.1234
          description: '제품+서버+사양+시퀀스의 합산코드로 제품서버생성에 사용되는 코드입니다. <br> 예시) SG.IN.PM.101'
        vpc_no:
          type: integer
          format: int32
          description: ''
        subnet:
          type: string
          format: ipv4/prefix
          description: 'x.x.x.x/24'
        subnet_no:
          type: integer
          format: int32
          description: '서버를 생성한 서브넷 번호를 지정합니다. <br> 신규 서브넷 생성 시 공란으로 해야합니다.'
        public_ip:
          type: boolean
          description: '공인IP 사용 여부 <br> (단, 서브넷에서 공인망을 사용하지 않는 경우 사용불가합니다.'
    ServiceMetaData:
      type: object
      description: '솔루션의 상품 구성한 모든 정보를 담고 있는 스키마'
      required:
        - product
        - tenent
        - server_config
      properties:
        product:
          type: string
        tenent:
          $ref: '#/components/schemas/Tenent'
        server_config:
          type: array
          items:
            $ref: '#/components/schemas/NcpServerConfigTf'

      
    
    
      
    ResponseMsg:
      type: object
      description: 'REST API 응답 객체'
      properties:
        msg:
          type: string
          description: 'Response 세부 내용 기입'