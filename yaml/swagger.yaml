openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/hanssak/IW-API/1.0.0
info:
  version: "1.0.0"
  title: HS Cloud API
  contact:
    email: hsrnd1@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'


tags:
  - name: 1. 신청
    description: '회원 가입 신청, 탈퇴, 관리자 승인, 알림등 사용자 이벤트 처리 Cycle'  
  - name: 2. 생성
    description: 'Cloud SaaS관련: 제품(솔루션), 인프라, 서버, 네트워크 생성 및 구성'
  - name: 3. 인증
    description: '로그인, 인증, 인가, 토큰 발급 (검증)'
  - name: '4.1 관리: 조직관리'
    description: '관리포털에서 사용하는 사용자 조직 관리 (Cloud관리자)'
  - name: '4.2 관리: 사용자 설정'
    description: '서비스포털에서 사용하는 유저 설정: 서비스 관리자 및 서비스포털 이용자) <br> (탈퇴, 정보 업데이트, 프로필 가져오기, 패스워드변경, 레포트, 구독정보)'
  - name: '4.3 관리: 시스템'
    description: '[SA연동] 시스템(Tenent, VM, IW-SA 서비스), Cloud(Network, VM, Storage) 제어 '
  - name: 5. 운영
    description: '[SA연동] 모니터링, 오토스케일링 상태 관리'
  - name: 6. 과금
    description: '[SA연동] SaaS 미터링, 빌링, 청구서 관리'
  - name: 7. 패치
    description: '[SA연동] 업데이트, 백업, 복구'


paths:
  '/apply/member':
    post:
      tags:
        - "1. 신청"
      summary: '1.1.1 고객사 등록: 테넌트 생성 #PostApplyMember' 
      description: '\- 테넌트 생성 신청: 외부 API -> API Gateway -> Configurator <br> required를 필수로 지켜야 합니다. 또한 등록 성공 시 SaaS DB가 생성됩니다.'
      operationId: PostApplyMember
      security:
        - bearerAuth: []
      parameters: 
        - in: header
          name: Authorization
          required: true
          schema:
            $ref: '#/components/schemas/parameter_token'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/member'
        required: true
      responses:
        '201':
          description: '테넌트 생성 성공'
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: '#/components/schemas/seq'
                  - $ref: '#/components/schemas/member_tenant'
                  - $ref: '#/components/schemas/member_company'
        '409':
          $ref: '#/components/responses/conflict'
  '/apply/member/{company}':
    delete:
      tags:
        - "1. 신청"
      summary: '1.1.2 고객사 삭제: 테넌트 반납 #DeleteApplyMember' 
      description: '\- 테넌트 반납 신청: 외부 API -> API Gateway -> Configurator <br> 반납 성공 시 SaaS DB 휴먼상태로 전환 하게 됩니다.'
      operationId: DeleteApplyMember
      security:
        - bearerAuth: []
      parameters: 
        - name: company 
          in: path
          required: true
          description: '고객사 ID'
          schema:
            $ref: '#/components/schemas/parameter_company_name'
        - in: header
          name: Authorization
          required: true
          schema:
            $ref: '#/components/schemas/parameter_token'
      responses:
        '200':
          description: '테넌트 삭제 성공'
        '400':
          $ref: '#/components/responses/badRequest'
        '404':
          $ref: '#/components/responses/notFound'

  '/gatekeeper/member-confirm':
    post:
      tags:
        - 1. 신청
      summary: '1.2.1, 1.2.2 회원 가입 : 중복 고객사(회사)명 확인 #PostMemberConfirm'
      description: '\- 회원가입 시 고객사 확인: 서비스포털 -> API Gateway -> GateKeeper <br> 회사명 중복 확인 요청'
      operationId: PostMemberConfirm 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/member_company'
      responses:
        200:
          description: '아이디 생성 가능 (중복 없음)'
        409:
          $ref: '#/components/responses/conflict'

  '/gatekeeper/user-confirm':
    post:
      tags:
        - 1. 신청
      summary: '1.2.1, 1.2.2 회원 가입 : 중복 ID 확인 #PostUserConfirm'
      description: '\- 회원가입 시 ID 확인: 서비스포털 -> API Gateway -> GateKeeper <br> ID 중복 확인 요청'
      operationId: PostUserConfirm
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/member_company'
                - $ref: '#/components/schemas/userid'
      responses:
        200:
          description: '아이디 생성 가능 (중복 없음)'
        409:
          $ref: '#/components/responses/conflict'
  
  '/gatekeeper/register':
    post:
      tags:
        - 1. 신청
      summary: '1.2.1, 1.2.2 회원 가입 : 사용자 생성 #PostRegisterId'
      description: '\- 가입요청 신청: 서비스포털 -> API Gateway -> GateKeeper <br> 제공된 ID는 고유해야 합니다. 또한 등록이 성공적으로 완료되면 제공된 주소로 확인 이메일을 보내야합니다.'
      operationId: PostRegisterId
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/member_company'
                - $ref: '#/components/schemas/saas_admin'
        description: '가입 신청 중 승인여부에 따른 STATUS 상태 표기 필요 (ADMIN_STATUS)'
        required: true
      responses:
        201:
          description: 'ID 생성 성공'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/seq'
        400:
          $ref: '#/components/responses/badRequest'
        409:
          $ref: '#/components/responses/conflict'
              
  '/speaker/invite':
    post:
      tags:
        - '1. 신청'
      summary: '1.2.3 회원가입 : 사용자 초대 #PostInvite'
      description: '\- 클라우드관리자가 사용자에게 초대장 전송: 관리포털 -> API Gateway -> Speaker <br> 이메일 형태로 전송해야 함'
      operationId: PostInvite
      security:
        - bearerAuth: []
      parameters: 
        - in: header
          name: Authorization
          required: true
          schema:
            $ref: '#/components/schemas/parameter_token'
          description: '관리자가 초대하는 URL로 인증된 사용자가 해야함'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/noti'
        description: '이메일 초대장으로 type:email을 설정해야합니다.'
      responses:
        '200':
          description: '이메일 초대장 전송 완료'

  '/{id}/order/product-list':
    post:
      tags:
        - "2. 생성"
      summary: '2.1.1 SaaS 신청: 상품 신청 버튼 클릭 이벤트 #PostOrderProductlist'
      description: '\- 서비스포털 -> API Gateway -> Configurator <br> 제품 신청 버튼을 클릭할때 호출되는 이벤트로 고객사 정보를 가지고 있어야합니다. '
      operationId: PostOrderProductlist
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/parameter_company_name'
        - in: header
          name: Authorization
          required: true
          schema:
            $ref: '#/components/schemas/parameter_token'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/member_tenant'
                - $ref: '#/components/schemas/seq'
              description: '고객사 SEQ 삽입'
      responses:
        '201':
          description: '제품 리스트 생성 후 SEQ 수렴'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/seq'
                  - $ref: '#/components/schemas/member_tenant'
                description: '제품리스트 SEQ, 테넌트ID'
        '409':
          $ref: '#/components/responses/conflict'

  '/{id}/order/product':
    get:
      tags:
        - "2. 생성"
      summary: '2.1.1 SaaS 신청: SaaS상품 전체 목록 조회 #GetOrderProduct'
      description: '\- 서비스포털 -> API Gateway -> Configurator <br> 상품 및 제품 신청의 초기단계 '
      operationId: GetOrderProduct
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/parameter_company_name'
        - in: header
          name: Authorization
          required: true
          schema:
            $ref: '#/components/schemas/parameter_token'
      responses:
        '200':
          description: '제품 모든 목록'
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      cloud:
                        type: array
                        items:
                          $ref: '#/components/schemas/cloud'
                      product:
                        type: array
                        items:
                          $ref: '#/components/schemas/product'
                      service:
                        type: array
                        items:
                          $ref: '#/components/schemas/service'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'
    post:
      tags:
       - "2. 생성"
      summary: '2.1.1 SaaS 신청: SaaS 제품 주문 이력 등록 #PostOrderProduct'
      description: '\- 서비스포털 -> API Gateway -> Configurator <br> 제품 선택에 따른 주문이력 정보 등록 order 정보에 삽입 (1단계)'
      operationId: PostOrderProduct
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/parameter_company_name'
        - in: header
          name: Authorization
          required: true
          schema:
            $ref: '#/components/schemas/parameter_token'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/order_header'
                - type: object
                  properties:
                    order_info:
                      type: object
                      properties:
                        cloud:
                          type: string
                        product:
                          type: string
                        service:
                          type: string
      responses:
        '201':
          description: '주문 이력 등록 완료'
        '409':
          $ref: '#/components/responses/conflict'

  '/{id}/order/license':
    get:
      tags:
        - 2. 생성
      summary: '2.1.1 SaaS 신청: SaaS상품 라이센스 조회 #GetOrderLicense'
      description: '\- 서비스포털 -> API Gateway -> Configurator <br> 제품 라이선스 목록 조회 (q 파라미터로 제품 검색 해야합니다.)'
      operationId: GetOrderLicense
      security:
        - bearerAuth: []
      parameters: 
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/parameter_company_name'
        - in: header
          name: Authorization
          required: true
          schema:
            $ref: '#/components/schemas/parameter_token'
        - in: query
          name: product
          schema:
            type: string
            example: 'q=product%3DSG'
          required: true
        - in: query
          name: service
          schema:
            type: string
            example: 'q=service%3DFILE'
          required: true
      responses:
        '200':
          description: '상품에 따른 라이센스 종류 정보'
          content:
            application/json:
              schema:
                type: object
                properties:
                  license:
                    type: array
                    items: 
                      $ref: '#/components/schemas/license'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'
    post:
      tags:
        - "2. 생성"
      summary: '2.1.1 SaaS 신청: 라이센스 목록 선택 (추가) 이벤트 #PostOrderLicense'
      description: '\- 서비스포털 -> API Gateway -> Configurator <br> 라이선스 선택 후 다음 버튼을 클릭할때 호출되는 이벤트로 라이센스 선택정보를 주문이력에 추가하는 동작을 합니다. '
      operationId: PostOrderLicense 
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/parameter_company_name'
        - in: header
          name: Authorization
          required: true
          schema:
            $ref: '#/components/schemas/parameter_token'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/order_header'
                - type: object
                  properties:
                    order_info:
                      type: object
                      properties:
                        license: 
                          $ref: '#/components/schemas/license'
      responses:
        '201':
          description: '주문 이력 등록 완료'
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/id'
        '409':
          $ref: '#/components/responses/conflict'

  '/{id}/order/service/{service_id}/add-service':
    get:
      tags: 
        - '2. 생성'
      summary: '2.1.1 SaaS 신청: 부가서비스 정보 조회 #GetOrderAddservice'
      description: '\- 서비스포털 -> API Gateway -> Configurator <br> 부가 서비스 모듈 정보들을 조회합니다. 부가서비스는 여러 서비스를 신청할 수 있으므로, 복수 선택을 지원해야 합니다. (입력 데이터는 주문정보에 저장됩니다.)'
      operationId: GetOrderAddservice
      security:
        - bearerAuth: []
      parameters: 
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/parameter_company_name'
        - name: service_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/parameter_service_id'
        - in: header
          name: Authorization
          required: true
          schema:
            $ref: '#/components/schemas/parameter_token'
      responses:
        '200':
          description: '서비스 ID에 따른 부가서비스 리스트'
          content:
            application/json:
              schema: 
                type: object
                properties:
                  add_service:
                    type: array
                    items:
                      $ref: '#/components/schemas/add_service'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'
    post:
      tags: 
        - '2. 생성'
      summary: '2.1.1 SaaS 신청: 부가서비스 신청 등록 #PostOrderAddservice'
      description: '\- 서비스포털 -> API Gateway -> Configurator <br> 부가 서비스 모듈 선택 이벤트입니다. 부가서비스는 여러 서비스를 신청할 수 있으므로, 복수 선택을 지원해야 합니다. (입력 데이터는 주문정보에 저장됩니다.)'
      operationId: PostOrderAddservice
      security:
        - bearerAuth: []
      parameters: 
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/parameter_company_name'
        - name: service_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/parameter_service_id'
        - in: header
          name: Authorization
          required: true
          schema:
            $ref: '#/components/schemas/parameter_token'
      requestBody:
        content:
          application/json:
            schema: 
              allOf:
                - $ref: '#/components/schemas/order_header'
                - type: object
                  properties:
                    order_info:
                      type: object
                      properties:
                        add_service: 
                          type: array
                          items:
                            type: string
                            example: "AddServiceID"
      responses:
        '201':
          description: '주문 이력 등록 완료'
        '400':
          $ref: '#/components/responses/badRequest'
        '409':
          $ref: '#/components/responses/conflict'
  
  '/{id}/order/auto-scale':
    get:
      tags: 
        - '2. 생성'
      summary: '2.1.1 SaaS 신청: SaaS AutoScale 데이터 조회 #GetOrderScale'
      description: '\- 서비스포털 -> API Gateway -> Configurator <br> AutoScale 목록 조회 (q 파라미터로 부가서비스 ID 입력해야합니다.)'
      operationId: GetOrderScale
      security:
        - bearerAuth: []
      parameters: 
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/parameter_company_name'
        - in: header
          name: Authorization
          required: true
          schema:
            $ref: '#/components/schemas/parameter_token'
        - in: query
          name: license-id 
          schema:
            type: string
            example: 'q=license-id%3D{LicenseID}'
          required: true
      responses:
        '200':
          description: 'AutoScale 부가서비스ID에 따른 Scale 정책정보'
          content:
            application/json:
              schema: 
                type: object
                properties:
                  autoscale:
                    type: object
                    properties:
                      group: 
                        type: array
                        items:
                          $ref: '#/components/schemas/autoscale'
                      system:
                        type: object
                        properties:
                          '{system-id-0}': 
                            type: array
                            items:
                              $ref: '#/components/schemas/autoscale'
                          '{system-id-1}': 
                            type: array
                            items:
                              $ref: '#/components/schemas/autoscale'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'
    post:
      tags: 
        - '2. 생성'
      summary: '2.1.1 SaaS 신청: SaaS AutoScale 데이터 등록 #PostOrderScale'
      description: '\- 서비스포털 -> API Gateway -> Configurator <br> AutoScale 라이선스 주문 정보 저장 이벤트'
      operationId: PostOrderScale 
      security:
        - bearerAuth: []
      parameters: 
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/parameter_company_name'
        - in: header
          name: Authorization
          required: true
          schema:
            $ref: '#/components/schemas/parameter_token'
      requestBody:
        content:
          application/json:
            schema: 
              allOf:
                - $ref: '#/components/schemas/order_header'
                - type: object
                  properties:
                    order_info:
                      type: object
                      properties:
                        autoscale: 
                          type: object 
                          properties:
                            group:
                              type: string
                              example: "Scale Policy ID"
                            '{system-id-0}': 
                              type: string
                              example: "Scale Policy ID"
                            '{system-id-1}': 
                              type: string
                              example: "Scale Policy ID"
      responses:
        '201':
          description: '주문 이력 등록 완료'
        '400':
          $ref: '#/components/responses/badRequest'
        '409':
          $ref: '#/components/responses/conflict'

  '/{id}/order/config':
    get:
      tags: 
        - '2. 생성'
      summary: '[작성예정] 2.1.1 SaaS 신청: SaaS 제품 구성 (폼) 데이터 조회 #GetOrderConfig'
      operationId: GetOrderConfig
      responses:
        '200':
          description: ''
    post:
      tags: 
        - '2. 생성'
      summary: '[작성예정] 2.1.1 SaaS 신청: SaaS 제품구성 주문 등록 #GetOrderConfig'
      operationId: PostOrderConfig 
      responses:
        '201':
          description: ''

  '/{id}/order/server':
    get:
      tags: 
        - '2. 생성'
      summary: '2.1.1 SaaS 신청: SaaS서버 데이터 조회 #GetOrderServer'
      description: '\- 서비스포털 -> API Gateway -> Configurator <br> 서비스에 사전정의된 서버 모듈 정보들을 조회합니다. 해당 정보들은 서버의 실제 코드들도 내포되어 있습니다. (입력 데이터는 주문정보에 저장됩니다.)'
      operationId: GetOrderServer
      security:
        - bearerAuth: []
      parameters: 
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/parameter_company_name'
        - in: header
          name: Authorization
          required: true
          schema:
            $ref: '#/components/schemas/parameter_token'
        - in: query
          name: license-id 
          schema:
            type: string
            example: 'q=license-id%3D{LicenseID}'
          required: true
        - in: query
          name: cloud-id 
          schema:
            type: string
            example: 'q=cloud-id%3D{CloudID}'
          required: true
        - in: query
          name: system 
          schema:
            type: string
            example: 'q=system%3D{SystemID}'
          required: true
      responses:
        '200':
          description: 'Server 데이터 정보 모두 조회'
          content:
            application/json:
              schema:
                type: object
                properties:
                  server:
                    type: object
                    properties:
                      '{system-id-0}':
                        type: object
                        properties:
                          recommand_cloud_os_id:
                            type: string
                          cloud_os_id:
                            type: array
                            items:
                              $ref: '#/components/schemas/cloud_os'
                          recommand_cloud_product_id:
                            type: string
                          min_cloud_product_id:
                            type: string
                          cloud_product_id:
                            type: array
                            items:
                              $ref: '#/components/schemas/cloud_product'
                          min: 
                            type: integer
                          max:
                            type: integer
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'
    post:
      tags: 
        - '2. 생성'
      summary: '2.1.1 SaaS 신청: SaaS서버 주문 등록 #PostOrderServer'
      description: '\- 서비스포털 -> API Gateway -> Configurator <br> SaaS 서버 주문 정보 저장 이벤트'
      operationId: PostOrderServer 
      security:
        - bearerAuth: []
      parameters: 
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/parameter_company_name'
        - in: header
          name: Authorization
          required: true
          schema:
            $ref: '#/components/schemas/parameter_token'
      requestBody:
        content:
          application/json:
            schema: 
              allOf:
                - $ref: '#/components/schemas/order_header'
                - type: object
                  properties:
                    order_info:
                      type: object
                      properties:
                        server: 
                          type: object
                          properties:
                           '{system-id-0}':
                             type: object
                             properties:
                              cloud_os_id: 
                                type: string
                              cloud_product_id:
                                type: string
                              min: 
                                type: integer
                              max:
                                type: integer
      responses:
        '201':
          description: '주문 이력 등록 완료'
        '400':
          $ref: '#/components/responses/badRequest'
        '409':
          $ref: '#/components/responses/conflict'

  '/{id}/order/acg':
    get:
      tags: 
        - '2. 생성'
      summary: '[작성예정] 2.1.1 SaaS 신청: ACG 데이터 조회 #GetOrderAcg'
      responses:
        '200':
          description: ''
    post:
      tags: 
        - '2. 생성'
      summary: '[작성예정] 2.1.1 SaaS 신청: ACG 신청정보 등록 #PostOrderAcg'
      responses:
        '201':
          description: ''
  '/{id}/order/his':
    get:
      tags: 
        - '2. 생성'
      summary: '[작성예정] 2.1.1 SaaS 신청: 상품 신청정보 조회 #GetOrderHis'
      responses:
        '200':
          description: ''
  '/{id}/meta/product/create':
    post:
      tags: 
        - '2. 생성'
      summary: '[작성예정] 2.1.1 SaaS 신청: SaaS 생성 시작 명령 #PostMetaProductCreate'
      responses:
        '201':
          description: ''
  '/{id}/meta/product':
    get:
      tags:
        - '2. 생성'
      summary: '[작성예정] 2.1.2 SaaS 신청: SaaS 상품 조회 #GetMetaProduct'
      responses:
        '200':
          description: ''

  '/gatekeeper/login':
    post:
      tags:
        - 3. 인증
      operationId: PostCloudAdminLogin
      summary: '3.1.3 클라우드 관리자 로그인 인증 : 로그인 확인 및 토큰발급 #PostCloudAdminLogin'
      description: '\- ID, PASSWORD의 Validation을 체크하고, 토큰발급을 수행 : 관리 포털 -> API Gateway -> GateKeeper -> Provider'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: 
              - id
              - password
              properties:
                id:
                  type: string
                  example: 'id@hsck.com'
                  description: 'Domain 형태'
                password:
                  type: string
                  example: '124K8t9iHn!'
                  description: 'Password'
      responses:
        '200':
          description: >
            # Token
            
            ## Header
              {
                "alg": "HS256",
                "typ": "JWT"
              }
              
            ## Body
              {
                iss: hanssak-cloud.com
                exp: '1485270000000'
                tenent: xxxx
                group: develop
                auth: manager
                id: kng
              }
            
            ## Verify signature
            
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJoYW5zc2FrLWNsb3VkLmNvbSIsImV4cCI6IjE0ODUyNzAwMDAwMDAiLCJ0ZW5lbnQiOiJ4eHh4IiwiZ3JvdXAiOiJkZXZlbG9wIiwiYXV0aCI6Im1hbmFnZXIiLCJpZCI6ImtuZyJ9.b-MRxJ5UiBdTexOpRe299lLNj7G314eSznb0lT1lJts'
                    description: 'Token'
        '400':
          $ref: '#/components/responses/badRequest'
  '/{id}/gatekeeper/login':
    post:
      tags:
        - 3. 인증
      operationId: PostSaasAdminLogin
      summary: '3.1.4 SaaS 관리자 로그인 인증 : 로그인 확인 및 토큰발급 #PostSaasAdminLogin'
      description: '\- ID, PASSWORD의 Validation을 체크하고, 토큰발급을 수행 : 서비스 포털 -> API Gateway -> GateKeeper -> Provider'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: 
              - id
              - password
              properties:
                id:
                  type: string
                  example: 'id@hsck.com'
                  description: 'Domain 형태'
                password:
                  type: string
                  example: '124K8t9iHn!'
                  description: 'Password'
      responses:
        '200':
          description: >
            # Token
            
            ## Header
              {
                "alg": "HS256",
                "typ": "JWT"
              }
              
            ## Body
              {
                iss: hanssak-cloud.com
                exp: '1485270000000'
                tenent: xxxx
                group: develop
                auth: manager
                id: kng
              }
            
            ## Verify signature
            
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJoYW5zc2FrLWNsb3VkLmNvbSIsImV4cCI6IjE0ODUyNzAwMDAwMDAiLCJ0ZW5lbnQiOiJ4eHh4IiwiZ3JvdXAiOiJkZXZlbG9wIiwiYXV0aCI6Im1hbmFnZXIiLCJpZCI6ImtuZyJ9.b-MRxJ5UiBdTexOpRe299lLNj7G314eSznb0lT1lJts'
                    description: 'Token'
        '400':
          $ref: '#/components/responses/badRequest'
               
    
          


components:
  # --> 보안 스키마 정의 
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT Authoriztion header using the Bearer scheme"

  # --> 응답 컴포넌트 정의
  responses:
    badRequest:
      description: '400: 없는 필드 요청으로 에러 발생 (Field validation 실패)'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error_response'
    unauthorized:
      description: '401: API인증 실패 (token is missing or invalid)'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error_response'
    forbidden:
      description: '403: 인증에 성공했지만, 인증된 사용자 리소스에 엑세스 할 수 없는 에러'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error_response'
    notFound:
      description: '404: 리소스 찾을수 없음'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error_response'
    conflict:
      description: '409: 리소스 충돌 발생'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error_response'
    
  # --> 데이터 스키마 정의
  schemas:
    error_response:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required: 
        - code
        - message

### DB: Common Object
    product:
      allOf:
        - $ref: '#/components/schemas/id'
        - type: object
          properties:
            description:
              type: string
    service:
      allOf:
        - $ref: '#/components/schemas/id'
        - type: object
          properties:
            product_id:
              type: string
            description:
              type: string
    add_service:
      allOf:
        - $ref: '#/components/schemas/id'
        - type: object
          properties:
            plan_type:
              type: string
            price:
              type: integer
            description:
              type: string
    cloud:
      allOf:
        - $ref: '#/components/schemas/id'
        - type: object
          properties:
            restriction:
              type: object
              description: '제약사항'
            add_info:
              type: object
              description: '부가 정보'
    cloud_os:
      allOf:
        - $ref: '#/components/schemas/id'
        - type: object
          properties:
            cloud_id: 
              type: string
            cloud_os_code:
              type: string
            os:
              type: string
            add_info:
              type: object
    cloud_product:
      allOf:
        - $ref: '#/components/schemas/id'
        - type: object
          properties:
            cloud_id:
              type: string
            cloud_server_product_code:
              type: string
            platform:
              type: string
            category:
              type: string
            gpu:
              type: integer
            cpu:
              type: integer
            memory:
              type: integer
            disk:
              type: string
            storage_type:
              type: string
            add_info:
              type: object
    license:
      description: '(Base) 제품 라이선스 관련 오브젝트'
      allOf:
        - $ref: '#/components/schemas/id'
        - $ref: '#/components/schemas/license_plan'
        - type: object
          properties:
            product_id:
              type: string
            service_id:
              type: string
            grade:
              type: string
            description:
              type: string
          required:
            - "id"
    license_plan:
      type: object
      properties:
        plan:
          type: string
        rice:
          type: string
      required:
        - "plan"
    autoscale:
      description: '(Base) AutoScale 정책 오브젝트'
      allOf:
        - $ref: '#/components/schemas/id'
        - type: object
          properties:
            type:
              type: string
            policy:
              type: object
            description:
              type: string




### DB: Admin Object
    member:
      allOf:
        - $ref: '#/components/schemas/seq'
        - $ref: '#/components/schemas/member_tenant'
        - $ref: '#/components/schemas/member_company'
        - type: object
          properties:
            manager_name:
              type: string
            manager_department:
              type: string
            manager_position:
              type: string
            manager_rank:
              type: string
            status:
              type: string
            email: 
              type: string
            phone:
              type: string
            database_info:
              type: object
            payment_info:
              type: object
            add_info:
              type: object
            update_time:
              type: string
              format: "YYYYMMDDhhmmss"
            registration_date:
              type: string
              format: "YYYYMMDD"
          required:
            - manager_name
            - email
            - phone
    member_tenant:
      type: object
      properties:
        tenant_id:
          type: string
    member_company:
      type: object
      properties:
        company:
          type: string
      required:
        - "company"
    order_header:
      type: object
      allOf:
        - $ref: '#/components/schemas/member_tenant'
        - type: object
          properties:
            product_list_seq:
              type: integer
            step:
              type: integer






### DB: SaaS Object
    saas_admin:
      allOf:
        - $ref: '#/components/schemas/seq'
        - $ref: '#/components/schemas/userid'
        - $ref: '#/components/schemas/password'
        - type: object
          properties:
            grade:
              type: string
            name: 
              type: string
            department:
              type: string
            position:
              type: string
            rank:
              type: string
            status:
              type: string
            email:
              type: string
            phone:
              type: string
            ip_check:
              type: boolean
            mac_check:
              type: boolean
            update_time:
              type: string
              format: "YYYYMMDDhhmmss"
            registration_date:
              type: string
              format: "YYYYMMDD"
          required:
            - "grade"
            - "name"
            - "status"
            - "email"
            - "phone"
            - "ip_check"
            - "mac_check"
    
### Commen Properties Object 
    id:
      type: object
      properties:
        id:
          type: string
      required:
        - "id"
    seq:
      type: object
      properties:
        seq: 
          type: integer
    userid:
      type: object
      properties:
        userid:
          type: string
      required:
        - "userid"
    password:
      type: object
      properties:
        password:
          type: string
      required:
        - "password"
    noti:
      type: object
      description: '#oNoti 현재 Payload만 구성됨 --> MQ, REST 쓸지 정해지지 않음'
      required: 
        - type
        - from
        - to
        - msg
      properties:
        type: 
          type: string
          description: '알림 타입: kakao, email, phone'
          default: 'email'
        from:
          type: string
          description: '발신자 주소'
          default: 'hsck@hsck.com'
        to:
          type: string
          description: '수신자 주소'
          default: 'user@company.com'
        msg:
          type: string
          description: '메세지 내용'
 
## parameter Common ID
    parameter_company_name:
      type: string
      example: 'Company Name'
    parameter_service_id:
      type: string
      example: 'Service ID'
    parameter_token:
      type: string
      example: 'JWT Token'




           
    NcpServerConfigTf:
      type: object
      description: '네이버 클라우드 전용: 솔루션 서버 설정 정보 (server_code는 HS전용코드)'
      required: 
        - server_code
        - vpc_no
        - subnet
        - subnet_no
        - public_ip
      properties:
        server_code:
          type: string
          format: XX.XX.XX.1234
          description: '제품+서버+사양+시퀀스의 합산코드로 제품서버생성에 사용되는 코드입니다. <br> 예시) SG.IN.PM.101'
        vpc_no:
          type: integer
          format: int32
          description: ''
        subnet:
          type: string
          format: ipv4/prefix
          description: 'x.x.x.x/24'
        subnet_no:
          type: integer
          format: int32
          description: '서버를 생성한 서브넷 번호를 지정합니다. <br> 신규 서브넷 생성 시 공란으로 해야합니다.'
        public_ip:
          type: boolean
          description: '공인IP 사용 여부 <br> (단, 서브넷에서 공인망을 사용하지 않는 경우 사용불가합니다.'
        status:
          type: integer
          description: '서버 생성 상태를 표시'
    Vpc:
      type: object
      description: 'VPC 객체 (Cloud Broker와 연동)'
      properties:
        id:
          type: string
          description: 'VPC 고유 번호'
          example: '***04'
        name:
          type: string
          description: 'VPC 이름'
          example: 'test-***'
        ipv4_cidr_block:
          type: string
          description: 'VPC 네트워크 대역'
          example: '***.***.0.0/16'
        status:
          type: string
          description: 'VPC 상태'
        region:
          type: string
          description: 'VPC RegionCode'
          example: 'KR'        
    Subnet:
      type: object
      description: 'Subnet 객체 (Cloud Broker와 연동)'
      properties:
        id:
          type: string
          description: 'Subnet 고유 번호'
          example: '***04'
        vpc_id:
          type: string
          description: 'Subnet이 속한 Vpc 고유번호'
        name:
          type: string
          description: 'Subnet 이름'
          example: 'test-***'
        ipv4_cidr_block:
          type: string
          description: 'VPC 네트워크 대역'
          example: '***.***.0.0/16'
        status:
          type: string
          description: 'VPC 상태'
        zone:
          type: string