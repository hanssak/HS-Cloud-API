openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/hanssak/IW-API/1.0.0
info:
  version: "1.0.0"
  title: HS Cloud API
  contact:
    email: hsrnd1@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'


tags:
  - name: 1. 신청
    description: '회원 가입 신청, 탈퇴, 관리자 승인, 알림등 사용자 이벤트 처리 Cycle'  
  - name: 2. 생성
    description: 'Cloud SaaS관련: 제품(솔루션), 인프라, 서버, 네트워크 생성 및 구성'
  - name: 3. 인증
    description: '로그인, 인증, 인가, 토큰 발급 (검증)'
  - name: '4.1 관리: 조직관리'
    description: '관리포털에서 사용하는 사용자 조직 관리 (Cloud관리자)'
  - name: '4.2 관리: 사용자 설정'
    description: '서비스포털에서 사용하는 유저 설정: 서비스 관리자 및 서비스포털 이용자) <br> (탈퇴, 정보 업데이트, 프로필 가져오기, 패스워드변경, 레포트, 구독정보)'
  - name: '4.3 관리: 시스템'
    description: '[SA연동] 시스템(Tenent, VM, IW-SA 서비스), Cloud(Network, VM, Storage) 제어 '
  - name: 5. 운영
    description: '[SA연동] 모니터링, 오토스케일링 상태 관리'
  - name: 6. 과금
    description: '[SA연동] SaaS 미터링, 빌링, 청구서 관리'
  - name: 7. 패치
    description: '[SA연동] 업데이트, 백업, 복구'

## /////// NK ////////
paths:
  '/apply/member':
    post:
      tags:
        - "1. 신청"
      summary: '1.1.1 고객사 등록: 테넌트 생성 #PostApplyMember' 
      description: '\- 테넌트 생성 신청: 외부 API -> API Gateway -> Configurator <br> required를 필수로 지켜야 합니다. 또한 등록 성공 시 SaaS DB가 생성됩니다.'
      operationId: PostApplyMember
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/member'
        required: true
      responses:
        '201':
          description: '테넌트 생성 성공'
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: '#/components/schemas/seq'
                  - $ref: '#/components/schemas/member_tenant'
                  - $ref: '#/components/schemas/member_company'
        '409':
          $ref: '#/components/responses/conflict'
  '/apply/member/{company}':
    delete:
      tags:
        - "1. 신청"
      summary: '1.1.2 고객사 삭제: 테넌트 반납 #DeleteApplyMember' 
      description: '\- 테넌트 반납 신청: 외부 API -> API Gateway -> Configurator <br> 반납 성공 시 SaaS DB 휴먼상태로 전환 하게 됩니다.'
      operationId: DeleteApplyMember
      security:
        - bearerAuth: []
      parameters: 
        - name: company 
          in: path
          required: true
          description: '고객사 ID'
          schema:
            type: string
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            example: 'JWT Token'
      responses:
        '200':
          description: '테넌트 삭제 성공'
        '400':
          $ref: '#/components/responses/badRequest'
        '404':
          $ref: '#/components/responses/notFound'

  '/gatekeeper/member-confirm':
    post:
      tags:
        - 1. 신청
      summary: '1.2.1, 1.2.2 회원 가입 : 중복 고객사(회사)명 확인 #PostMemberConfirm'
      description: '\- 회원가입 시 고객사 확인: 서비스포털 -> API Gateway -> GateKeeper <br> 회사명 중복 확인 요청'
      operationId: PostMemberConfirm 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/member_company'
      responses:
        200:
          description: '아이디 생성 가능 (중복 없음)'
        409:
          $ref: '#/components/responses/conflict'

  '/gatekeeper/user-confirm':
    post:
      tags:
        - 1. 신청
      summary: '1.2.1, 1.2.2 회원 가입 : 중복 ID 확인 #PostUserConfirm'
      description: '\- 회원가입 시 ID 확인: 서비스포털 -> API Gateway -> GateKeeper <br> ID 중복 확인 요청'
      operationId: PostUserConfirm
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/member_company'
                - $ref: '#/components/schemas/userid'
      responses:
        200:
          description: '아이디 생성 가능 (중복 없음)'
        409:
          $ref: '#/components/responses/conflict'
  
  '/gatekeeper/register':
    post:
      tags:
        - 1. 신청
      summary: '1.2.1, 1.2.2 회원 가입 : 사용자 생성 #PostRegisterId'
      description: '\- 가입요청 신청: 서비스포털 -> API Gateway -> GateKeeper <br> 제공된 ID는 고유해야 합니다. 또한 등록이 성공적으로 완료되면 제공된 주소로 확인 이메일을 보내야합니다.'
      operationId: PostRegisterId
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/member_company'
                - $ref: '#/components/schemas/saas_admin'
        description: '가입 신청 중 승인여부에 따른 STATUS 상태 표기 필요 (ADMIN_STATUS)'
        required: true
      responses:
        201:
          description: 'ID 생성 성공'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/seq'
        400:
          $ref: '#/components/responses/badRequest'
        409:
          $ref: '#/components/responses/conflict'
              
  '/speaker/invite':
    post:
      tags:
        - '1. 신청'
      summary: '1.2.3 회원가입 : 사용자 초대 #PostInvite'
      description: '\- 클라우드관리자가 사용자에게 초대장 전송: 관리포털 -> API Gateway -> Speaker <br> 이메일 형태로 전송해야 함'
      operationId: PostInvite
      security:
        - bearerAuth: []
      parameters: 
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            example: 'JWT Token'
          description: '관리자가 초대하는 URL로 인증된 사용자가 해야함'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/noti'
        description: '이메일 초대장으로 type:email을 설정해야합니다.'
      responses:
        '200':
          description: '이메일 초대장 전송 완료'




# 수정 전
  '/apply/products/{name}/license':
    get:
      tags:
        - 2. 생성
      summary: '2.1.1 SaaS 신청: SaaS상품 라이센스 조회 #GetApplyProductLicense'
      description: '\- 서비스포털 -> API Gateway -> Configurator <br> 상품 (SG, PG, OG)선택 후 제품 신청의 초기단계 '
      operationId: GetApplyProductLicense
      security:
        - bearerAuth: []
      parameters: 
        - name: name
          in: path
          required: true
          description: '상품명을 기입해야함 (예시: securegate, passguard)'
          schema:
            type: string
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            example: 'JWT Token'
      responses:
        '200':
          description: '상품에 따른 라이센스 종류 정보'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvisioningService'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'
          
  '/cloud/{platform}/vpc':
    get:
      tags:
        - 2. 생성
      summary: '2.1. SaaS 신청: Cloud의 VPC 데이터 조회 #GetCloudVpcList'
      description: '\- Cloud의 내부 VPC정보를 조회 (서버에서 클라우드와 연동됨) : 서비스 포털 -> API Gateway -> CloudBroker'
      operationId: GetCloudVpcList
      security:
        - bearerAuth: []
      parameters: 
        - name: platform
          in: path
          required: true
          schema:
            type: string
          description: 'cloud 플랫폼을 정의 (ncp, aws, azure)'
          example: 'ncp'
        - in: query
          name: region
          schema:
            type: string
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            example: 'JWT Token'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vpc'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'       
  '/cloud/{platform}/subnet':
    get:
      tags:
        - 2. 생성
      summary: '2.1. SaaS 신청: Cloud의 Subnet 데이터 조회 #GetCloudSubnetList'
      description: '\- Cloud의 내부 Subnet정보를 조회 (서버에서 클라우드와 연동됨) : 서비스 포털 -> API Gateway -> CloudBroker'
      operationId: GetCloudSubnetList
      security:
        - bearerAuth: []
      parameters: 
        - name: platform
          in: path
          required: true
          schema:
            type: string
          description: 'cloud 플랫폼을 정의 (ncp, aws, azure)'
          example: 'ncp'
        - in: query
          name: region
          schema:
            type: string
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            example: 'JWT Token'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subnet'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'      
    
  '/apply/products/{name}':
    post:
      tags:
        - 2. 생성
      summary: '2.1.1 SaaS 신청: SaaS상품 구성정보 (웹으로 모든 구성필요)  #PostApplyProduct'
      description: '\- 서비스포털 -> API Gateway -> MetaDataManager -> SaaS Builder <br> 각 Cloud와 연동하여 모든 솔루션 설정을 완료한 정보여야 합니다. 망연계일 경우 3개 장비 세트로 움직이게 됩니다.'
      operationId: PostApplyProduct
      security:
        - bearerAuth: []
      parameters: 
        - name: name
          in: path
          required: true
          description: '상품명을 기입해야함 (예시: securegate, passguard)'
          schema:
            type: string
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            example: 'JWT Token'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceMetaData'
        description: '구성한 상품정보 생성 요청으로 사전 cloud와 vpc정보 수용 필요'
      responses:
        '201':
          description: '정상적으로 생성 되었습니다.'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          description: '이미 생성되어있습니다. (충돌 발생)'
    get:
      tags:
        - 2. 생성
      summary: '2.1.2 SaaS 생성 상태 조회 : SaaS 상품의 생성 정보 조회 (필요 시 status만 파싱하여 조회 가능) #GetApplyProduct '
      description: '\- SaaS 상품신청 후 신청 결과에 대한 정보 조회 : 서비스포털 -> API Gateway -> MetaDataManager <br> '
      operationId: GetApplyProduct
      security:
        - bearerAuth: []
      parameters: 
        - name: name
          in: path
          required: true
          schema:
            type: string
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            example: 'JWT Token'
        - in: query
          name: fields
          schema:
            type: string
            example: 'status'
      responses:
        '200':
          description: '상품에 따른 라이센스 종류 정보'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceMetaData'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'
          





  '/gatekeeper/login':
    post:
      tags:
        - 3. 인증
      summary: '3.1.1 로그인 인증 : 로그인 확인 및 토큰발급 #Login'
      description: '\- ID, PASSWORD의 Validation을 체크하고, 토큰발급을 수행 : 서비스,관리 포털 -> API Gateway -> GateKeeper -> Provider'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: 
              - id
              - password
              properties:
                id:
                  type: string
                  example: 'id@hsck.com'
                  description: 'Domain 형태'
                password:
                  type: string
                  example: '124K8t9iHn!'
                  description: 'Password'
      responses:
        '200':
          description: >
            # Token
            
            ## Header
              {
                "alg": "HS256",
                "typ": "JWT"
              }
              
            ## Body
              {
                iss: hanssak-cloud.com
                exp: '1485270000000'
                tenent: xxxx
                group: develop
                auth: manager
                id: kng
              }
            
            ## Verify signature
            
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJoYW5zc2FrLWNsb3VkLmNvbSIsImV4cCI6IjE0ODUyNzAwMDAwMDAiLCJ0ZW5lbnQiOiJ4eHh4IiwiZ3JvdXAiOiJkZXZlbG9wIiwiYXV0aCI6Im1hbmFnZXIiLCJpZCI6ImtuZyJ9.b-MRxJ5UiBdTexOpRe299lLNj7G314eSznb0lT1lJts'
                    description: 'Token'
        '400':
          $ref: '#/components/responses/badRequest'
        
    
          
  '/member/users/{id}':
    get:
      tags:
        - '4.2 관리: 사용자 설정'
      summary: '1.2.1 회원 가입 : 포털을 통한 회원가입 신청 #GetUser'
      description: ': 서비스포털 -> API Gateway -> GateKeeper <br> ID확인요청'
      operationId: GetUser
      parameters:
        - name: id
          in: path
          description: The name that needs to be fetched.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/badRequest'
        '404':
          $ref: '#/components/responses/notFound'
    post:
      tags: 
        - '4.2 관리: 사용자 설정'
      summary: '1.2.1 회원 가입 : 포털을 통한 회원가입 신청 / 1.2.3 회원가입 : 클라우드 관리자가 ID 직접 발급  #PostUser'
      description: ': 서비스포털 -> API Gateway -> GateKeeper <br> 가입요청 신청'
      operationId: PostUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Successful create operation
        '400':
          $ref: '#/components/responses/badRequest'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Create user object
        required: true
    patch:
      tags:
        - '4.2 관리: 사용자 설정'
      summary: '1.2.2 회원가입 : 회원가입 신청 승인 #PatchUser'
      description: ': 관리포털 -> API Gateway -> GateKeeper <br> 가입요청에 대한 관리자 승인처리'
      operationId: PatchUser
      parameters: 
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '404':
          $ref: '#/components/responses/notFound'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                isApprove:
                  type: boolean
    delete:
      tags:
        - '4.2 관리: 사용자 설정'
      summary: '1.2.5 회원 탈퇴 #DeleteUser'
      description: ': 서비스/관리포털 -> API Gateway -> GateKeeper <br> 구성원 삭제 '
      operationId: DeleteUser
      parameters:
        - name: jwt
          in: header
          required: false
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          $ref: '#/components/responses/badRequest'
        '404':
          $ref: '#/components/responses/notFound'



components:
  # --> 보안 스키마 정의 
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT Authoriztion header using the Bearer scheme"

  # --> 응답 컴포넌트 정의
  responses:
    badRequest:
      description: '400: 없는 필드 요청으로 에러 발생 (Field validation 실패)'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
    unauthorized:
      description: '401: API인증 실패 (token is missing or invalid)'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
    forbidden:
      description: '403: 인증에 성공했지만, 인증된 사용자 리소스에 엑세스 할 수 없는 에러'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
    notFound:
      description: '404: 리소스 찾을수 없음'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
    conflict:
      description: '409: 리소스 충돌 발생'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
    
  # --> 데이터 스키마 정의
  schemas:
    errorResponse:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required: 
        - code
        - message

### DB: Admin Object
    member:
      allOf:
        - $ref: '#/components/schemas/seq'
        - $ref: '#/components/schemas/member_tenant'
        - $ref: '#/components/schemas/member_company'
        - type: object
          properties:
            manager_name:
              type: string
            manager_department:
              type: string
            manager_position:
              type: string
            manager_rank:
              type: string
            status:
              type: string
            email: 
              type: string
            phone:
              type: string
            database_info:
              type: object
            payment_info:
              type: object
            add_info:
              type: object
            update_time:
              type: string
              format: "YYYYMMDDhhmmss"
            registration_date:
              type: string
              format: "YYYYMMDD"
          required:
            - manager_name
            - email
            - phone
    member_tenant:
      type: object
      properties:
        tenant_id:
          type: string
    member_company:
      type: object
      properties:
        company:
          type: string
      required:
        - "company"




### DB: SaaS Object
    saas_admin:
      allOf:
        - $ref: '#/components/schemas/seq'
        - $ref: '#/components/schemas/userid'
        - $ref: '#/components/schemas/password'
        - type: object
          properties:
            grade:
              type: string
            name: 
              type: string
            department:
              type: string
            position:
              type: string
            rank:
              type: string
            status:
              type: string
            email:
              type: string
            phone:
              type: string
            ip_check:
              type: boolean
            mac_check:
              type: boolean
            update_time:
              type: string
              format: "YYYYMMDDhhmmss"
            registration_date:
              type: string
              format: "YYYYMMDD"
          required:
            - "grade"
            - "name"
            - "status"
            - "email"
            - "phone"
            - "ip_check"
            - "mac_check"
    
### Commen Object 
    seq:
      type: object
      properties:
        seq: 
          type: integer
    userid:
      type: object
      properties:
        userid:
          type: string
      required:
        - "userid"
    password:
      type: object
      properties:
        password:
          type: string
      required:
        - "password"
    noti:
      type: object
      description: '#oNoti 현재 Payload만 구성됨 --> MQ, REST 쓸지 정해지지 않음'
      required: 
        - type
        - from
        - to
        - msg
      properties:
        type: 
          type: string
          description: '알림 타입: kakao, email, phone'
          default: 'email'
        from:
          type: string
          description: '발신자 주소'
          default: 'hsck@hsck.com'
        to:
          type: string
          description: '수신자 주소'
          default: 'user@company.com'
        msg:
          type: string
          description: '메세지 내용'
 



## ////////// NK ////////////////  수정이 필요
    Tenent:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: 테넌트 ID
        groupName:
          type: string
          
    User:
      type: object
      required: 
        - id
        - password
        - username
        - isApprove
        - email
      properties:
        id:
          type: string
          example: 'id@hsck.com'
          description: 도메인 형식
        password:
          type: string
          description: 암호화 필수
        username:
          type: string
        email:
          type: string
        phone:
          type: string
        isApprove:
          type: boolean
          default: false
          description: '가입승인 처리 (false: 미승인, true: 승인)'

   
    ProvisioningServiceInfo:
      type: object
      properties:
        level:
          type: string
          default: 'basic'
          description: 'SaaS의 상품 등급 (Lite, Basic, Premium)'
        content:
          type: string
          example: 'basic 라이센스에 관한 내용'
          description: '설명'
        spec:
          type: string
          description: '사양'
        pricing:
          type: string
          description: '요금'
    ProvisioningService:
      type: object
      description: '사전에 정의된 SaaS상품의 정보 스키마'
      properties:
        product:
          type: string
          example: 'securegate'
          description: 'SaaS 상품 ID : securegate, passwordguard, officegate'
        info:
          type: array
          items:
            $ref: '#/components/schemas/ProvisioningServiceInfo'
            
    NcpServerConfigTf:
      type: object
      description: '네이버 클라우드 전용: 솔루션 서버 설정 정보 (server_code는 HS전용코드)'
      required: 
        - server_code
        - vpc_no
        - subnet
        - subnet_no
        - public_ip
      properties:
        server_code:
          type: string
          format: XX.XX.XX.1234
          description: '제품+서버+사양+시퀀스의 합산코드로 제품서버생성에 사용되는 코드입니다. <br> 예시) SG.IN.PM.101'
        vpc_no:
          type: integer
          format: int32
          description: ''
        subnet:
          type: string
          format: ipv4/prefix
          description: 'x.x.x.x/24'
        subnet_no:
          type: integer
          format: int32
          description: '서버를 생성한 서브넷 번호를 지정합니다. <br> 신규 서브넷 생성 시 공란으로 해야합니다.'
        public_ip:
          type: boolean
          description: '공인IP 사용 여부 <br> (단, 서브넷에서 공인망을 사용하지 않는 경우 사용불가합니다.'
        status:
          type: integer
          description: '서버 생성 상태를 표시'
          
    ServiceMetaData:
      type: object
      description: '솔루션의 상품 구성한 모든 정보를 담고 있는 스키마'
      required:
        - product
        - server_config
      properties:
        product:
          type: string
        status:
          type: integer
          description: '서비스 상태'
        server_config:
          type: array
          items:
            $ref: '#/components/schemas/NcpServerConfigTf'

    Vpc:
      type: object
      description: 'VPC 객체 (Cloud Broker와 연동)'
      properties:
        id:
          type: string
          description: 'VPC 고유 번호'
          example: '***04'
        name:
          type: string
          description: 'VPC 이름'
          example: 'test-***'
        ipv4_cidr_block:
          type: string
          description: 'VPC 네트워크 대역'
          example: '***.***.0.0/16'
        status:
          type: string
          description: 'VPC 상태'
        region:
          type: string
          description: 'VPC RegionCode'
          example: 'KR'        
    Subnet:
      type: object
      description: 'Subnet 객체 (Cloud Broker와 연동)'
      properties:
        id:
          type: string
          description: 'Subnet 고유 번호'
          example: '***04'
        vpc_id:
          type: string
          description: 'Subnet이 속한 Vpc 고유번호'
        name:
          type: string
          description: 'Subnet 이름'
          example: 'test-***'
        ipv4_cidr_block:
          type: string
          description: 'VPC 네트워크 대역'
          example: '***.***.0.0/16'
        status:
          type: string
          description: 'VPC 상태'
        zone:
          type: string
    ResponseMsg:
      type: object
      description: 'REST API 응답 객체'
      properties:
        msg:
          type: string
          description: 'Response 세부 내용 기입'