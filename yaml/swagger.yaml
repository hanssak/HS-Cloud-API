openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/hanssak/IW-API/1.0.0
info:
  description: This is a HS Cloud API
  version: "1.0.0"
  title: HS Cloud API
  contact:
    email: hsrnd1@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: admins
    description: Secured Admin-only calls
  - name: user
    description: Operations about user
  - name: product
    description: Operations about product
    
paths:
  '/invites/{username}':
    post:
      tags:
        - user
      summary: (1.2.3) Invites user
      description: '회원가입 시 초대장 발급 방법'
      operationId: invitesUser
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
      responses:
        default:
          description: successful operation
  '/member/users/{username}':
    post:
      tags: 
        - user
      summary: (1.2) Create user
      description: '회원가입 Flow에 사용되는 RestAPI'
      operationId: createUser
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Successful operation
        '400':
          description: Invalid input, object invalid
        '409':
          description: An existing user already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Create user object
        required: true
    put:
      tags:
        - user
      summary: (1.2.1) Updated User
      operationId: updateUser
      parameters: 
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Update user object
        required: true
      responses:
        '200':
          description: Success update user
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: (1.2.4) Delete user by username
      operationId: DeleteByUsername
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    get:
      tags:
        - user
      summary: Get user by username
      operationId: getByUsername
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found

components:
  schemas:
    Tenent:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: 테넌트 ID
        groupName:
          type: string
    User:
      type: object
      required: 
        - id
        - password
        - username
        - tenentId
        - isApprove
      properties:
        id:
          type: string
        password:
          type: string
          description: 암호화 필수
        username:
          type: string
        email:
          type: string
        phone:
          type: string
        isApprove:
          type: boolean
          default: false
          description: '가입승인 처리 (false: 미승인, true: 승인)'
        tenent:
          $ref: '#/components/schemas/Tenent'
    Product:
      type: object
      properties:
        name:
          type: string
          description: 제품명